import { unmarshalPrivateKey } from '@libp2p/crypto/keys';
import { CodeError, serviceCapabilities, isPeerId } from '@libp2p/interface';
import { peerIdFromKeys } from '@libp2p/peer-id';
import { decode } from 'it-length-prefixed';
import { lpStream } from 'it-length-prefixed-stream';
import { duplexPair } from 'it-pair/duplex';
import { pipe } from 'it-pipe';
import { alloc as uint8ArrayAlloc } from 'uint8arrays/alloc';
import { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js';
import { defaultCrypto } from './crypto/index.js';
import { wrapCrypto } from './crypto.js';
import { uint16BEDecode, uint16BEEncode } from './encoder.js';
import { registerMetrics } from './metrics.js';
import { performHandshakeInitiator, performHandshakeResponder } from './performHandshake.js';
import { decryptStream, encryptStream } from './streaming.js';
export class Noise {
    protocol = '/noise';
    crypto;
    prologue;
    staticKey;
    extensions;
    metrics;
    components;
    constructor(components, init = {}) {
        const { staticNoiseKey, extensions, crypto, prologueBytes } = init;
        const { metrics } = components;
        this.components = components;
        const _crypto = crypto ?? defaultCrypto;
        this.crypto = wrapCrypto(_crypto);
        this.extensions = extensions;
        this.metrics = metrics ? registerMetrics(metrics) : undefined;
        if (staticNoiseKey) {
            // accepts x25519 private key of length 32
            this.staticKey = _crypto.generateX25519KeyPairFromSeed(staticNoiseKey);
        }
        else {
            this.staticKey = _crypto.generateX25519KeyPair();
        }
        this.prologue = prologueBytes ?? uint8ArrayAlloc(0);
    }
    [Symbol.toStringTag] = '@chainsafe/libp2p-noise';
    [serviceCapabilities] = [
        '@libp2p/connection-encryption',
        '@chainsafe/libp2p-noise'
    ];
    async secureOutbound(...args) {
        const { localPeer, connection, remotePeer, signal } = this.parseArgs(args);
        const wrappedConnection = lpStream(connection, {
            lengthEncoder: uint16BEEncode,
            lengthDecoder: uint16BEDecode,
            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES
        });
        if (!localPeer.privateKey) {
            throw new CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY');
        }
        const privateKey = await unmarshalPrivateKey(localPeer.privateKey);
        const remoteIdentityKey = remotePeer?.publicKey;
        const handshake = await this.performHandshakeInitiator(wrappedConnection, privateKey, remoteIdentityKey, {
            signal
        });
        const conn = await this.createSecureConnection(wrappedConnection, handshake);
        connection.source = conn.source;
        connection.sink = conn.sink;
        return {
            conn: connection,
            remoteExtensions: handshake.payload.extensions,
            remotePeer: await peerIdFromKeys(handshake.payload.identityKey)
        };
    }
    async secureInbound(...args) {
        const { localPeer, connection, remotePeer, signal } = this.parseArgs(args);
        const wrappedConnection = lpStream(connection, {
            lengthEncoder: uint16BEEncode,
            lengthDecoder: uint16BEDecode,
            maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES
        });
        if (!localPeer.privateKey) {
            throw new CodeError('local peerId does not contain private key', 'ERR_NO_PRIVATE_KEY');
        }
        const privateKey = await unmarshalPrivateKey(localPeer.privateKey);
        const remoteIdentityKey = remotePeer?.publicKey;
        const handshake = await this.performHandshakeResponder(wrappedConnection, privateKey, remoteIdentityKey, {
            signal
        });
        const conn = await this.createSecureConnection(wrappedConnection, handshake);
        connection.source = conn.source;
        connection.sink = conn.sink;
        return {
            conn: connection,
            remoteExtensions: handshake.payload.extensions,
            remotePeer: await peerIdFromKeys(handshake.payload.identityKey)
        };
    }
    /**
     * Perform XX handshake as initiator.
     */
    async performHandshakeInitiator(connection, 
    // TODO: pass private key in noise constructor via Components
    privateKey, remoteIdentityKey, options) {
        let result;
        try {
            result = await performHandshakeInitiator({
                connection,
                privateKey,
                remoteIdentityKey,
                log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),
                crypto: this.crypto,
                prologue: this.prologue,
                s: this.staticKey,
                extensions: this.extensions
            }, options);
            this.metrics?.xxHandshakeSuccesses.increment();
        }
        catch (e) {
            this.metrics?.xxHandshakeErrors.increment();
            throw e;
        }
        return result;
    }
    /**
     * Perform XX handshake as responder.
     */
    async performHandshakeResponder(connection, 
    // TODO: pass private key in noise constructor via Components
    privateKey, remoteIdentityKey, options) {
        let result;
        try {
            result = await performHandshakeResponder({
                connection,
                privateKey,
                remoteIdentityKey,
                log: this.components.logger.forComponent('libp2p:noise:xxhandshake'),
                crypto: this.crypto,
                prologue: this.prologue,
                s: this.staticKey,
                extensions: this.extensions
            }, options);
            this.metrics?.xxHandshakeSuccesses.increment();
        }
        catch (e) {
            this.metrics?.xxHandshakeErrors.increment();
            throw e;
        }
        return result;
    }
    async createSecureConnection(connection, handshake) {
        // Create encryption box/unbox wrapper
        const [secure, user] = duplexPair();
        const network = connection.unwrap();
        await pipe(secure, // write to wrapper
        encryptStream(handshake, this.metrics), // encrypt data + prefix with message length
        network, // send to the remote peer
        (source) => decode(source, { lengthDecoder: uint16BEDecode }), // read message length prefix
        decryptStream(handshake, this.metrics), // decrypt the incoming data
        secure // pipe to the wrapper
        );
        return user;
    }
    /**
     * Detect call signature in `libp2p@1.x.x` or `libp2p@2.x.x` style.
     *
     * TODO: remove this after `libp2p@2.x.x` is released and only support the
     * newer style
     */
    parseArgs(args) {
        // if the first argument is a peer id, we're using the libp2p@1.x.x style
        if (isPeerId(args[0])) {
            return {
                localPeer: args[0],
                connection: args[1],
                remotePeer: args[2]
            };
        }
        else {
            // handle upcoming changes in libp2p@2.x.x where the first argument is the
            // connection and the second is optionally the remote peer
            // @see https://github.com/libp2p/js-libp2p/pull/2304
            return {
                localPeer: this.components.peerId,
                connection: args[0],
                remotePeer: args[1]?.remotePeer,
                signal: args[1]?.signal
            };
        }
    }
}
//# sourceMappingURL=noise.js.map