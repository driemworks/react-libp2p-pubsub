{"version":3,"file":"index.umd.js","sources":["../src/util.ts","../src/blockchains/utils/ripemd160.ts","../src/Digest.ts","../src/signers/ES256KSigner.ts","../src/signers/SimpleSigner.ts","../src/signers/EllipticSigner.ts","../src/signers/EdDSASigner.ts","../src/signers/NaclSigner.ts","../src/signers/ES256Signer.ts","../src/SignerAlgorithm.ts","../src/blockchains/bip122.ts","../src/blockchains/cosmos.ts","../src/blockchains/index.ts","../src/VerifierAlgorithm.ts","../src/Errors.ts","../src/JWT.ts","../src/JWE.ts","../src/ECDH.ts","../src/xc20pEncryption.ts"],"sourcesContent":["import * as u8a from 'uint8arrays'\nimport { bases } from 'multiformats/basics'\n\n/**\n * @deprecated Signers will be expected to return base64url `string` signatures.\n */\nexport interface EcdsaSignature {\n  r: string\n  s: string\n  recoveryParam?: number | null\n}\n\nexport function bytesToBase64url(b: Uint8Array): string {\n  return u8a.toString(b, 'base64url')\n}\n\nexport function base64ToBytes(s: string): Uint8Array {\n  const inputBase64Url = s.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n  return u8a.fromString(inputBase64Url, 'base64url')\n}\n\nexport function bytesToBase64(b: Uint8Array): string {\n  return u8a.toString(b, 'base64pad')\n}\n\nexport function base58ToBytes(s: string): Uint8Array {\n  return u8a.fromString(s, 'base58btc')\n}\n\nexport function bytesToBase58(b: Uint8Array): string {\n  return u8a.toString(b, 'base58btc')\n}\n\nexport function bytesToMultibase(b: Uint8Array, base: keyof typeof bases): string {\n  return bases[base].encode(b)\n}\n\nexport function hexToBytes(s: string): Uint8Array {\n  const input = s.startsWith('0x') ? s.substring(2) : s\n  return u8a.fromString(input.toLowerCase(), 'base16')\n}\n\nexport function encodeBase64url(s: string): string {\n  return bytesToBase64url(u8a.fromString(s))\n}\n\nexport function decodeBase64url(s: string): string {\n  return u8a.toString(base64ToBytes(s))\n}\n\nexport function bytesToHex(b: Uint8Array): string {\n  return u8a.toString(b, 'base16')\n}\n\nexport function stringToBytes(s: string): Uint8Array {\n  return u8a.fromString(s)\n}\n\nexport function toJose({ r, s, recoveryParam }: EcdsaSignature, recoverable?: boolean): string {\n  const jose = new Uint8Array(recoverable ? 65 : 64)\n  jose.set(u8a.fromString(r, 'base16'), 0)\n  jose.set(u8a.fromString(s, 'base16'), 32)\n  if (recoverable) {\n    if (typeof recoveryParam === 'undefined') {\n      throw new Error('Signer did not return a recoveryParam')\n    }\n    jose[64] = <number>recoveryParam\n  }\n  return bytesToBase64url(jose)\n}\n\nexport function fromJose(signature: string): { r: string; s: string; recoveryParam?: number } {\n  const signatureBytes: Uint8Array = base64ToBytes(signature)\n  if (signatureBytes.length < 64 || signatureBytes.length > 65) {\n    throw new TypeError(`Wrong size for signature. Expected 64 or 65 bytes, but got ${signatureBytes.length}`)\n  }\n  const r = bytesToHex(signatureBytes.slice(0, 32))\n  const s = bytesToHex(signatureBytes.slice(32, 64))\n  const recoveryParam = signatureBytes.length === 65 ? signatureBytes[64] : undefined\n  return { r, s, recoveryParam }\n}\n\nexport function toSealed(ciphertext: string, tag: string): Uint8Array {\n  return u8a.concat([base64ToBytes(ciphertext), base64ToBytes(tag)])\n}\n\nexport function leftpad(data: string, size = 64): string {\n  if (data.length === size) return data\n  return '0'.repeat(size - data.length) + data\n}\n","// https://github.com/crypto-browserify/ripemd160/blob/master/index.js\n\nconst zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14,\n  4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2,\n  10, 14, 1, 3, 8, 11, 6, 15, 13,\n]\n\nconst zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1,\n  3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5,\n  8, 7, 6, 2, 13, 14, 0, 3, 9, 11,\n]\n\nconst sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11,\n  13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5,\n  11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,\n]\n\nconst sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7,\n  15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9,\n  12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,\n]\n\nconst hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nconst hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction rotl(x: number, n: number) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & c) | (~b & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b | ~c) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + ((b & d) | (c & ~d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5(a: number, b: number, c: number, d: number, e: number, m: number, k: number, s: number) {\n  return (rotl((a + (b ^ (c | ~d)) + m + k) | 0, s) + e) | 0\n}\n\nexport class Ripemd160 {\n  // state\n  private _a = 0x67452301\n  private _b = 0xefcdab89\n  private _c = 0x98badcfe\n  private _d = 0x10325476\n  private _e = 0xc3d2e1f0\n  private _blockOffset = 0\n  private _block: Uint8Array\n  private _blockSize: number\n  private _length = [0, 0, 0, 0]\n  private _finalized: boolean\n\n  constructor(blockSize = 64) {\n    this._block = new Uint8Array(blockSize)\n    this._blockSize = blockSize\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n    this._finalized = false\n  }\n\n  update = (data: Uint8Array): Ripemd160 => {\n    if (this._finalized) throw new Error('Digest already called')\n\n    // consume data\n    const block = this._block\n    let offset = 0\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (let i = this._blockOffset; i < this._blockSize; ) block[i++] = data[offset++]\n      this._update()\n      this._blockOffset = 0\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n    // update length\n    for (let j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry\n      carry = (this._length[j] / 0x0100000000) | 0\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry\n    }\n\n    return this\n  }\n\n  digest = (): Uint8Array => {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    const digest = this._digest()\n\n    // reset state\n    this._block.fill(0)\n    this._blockOffset = 0\n    for (let i = 0; i < 4; ++i) this._length[i] = 0\n\n    return digest\n  }\n\n  private _update = () => {\n    const words = new Array(16)\n    const temp = new DataView(this._block.buffer)\n    for (let j = 0; j < 16; ++j) words[j] = words[j] = temp.getInt32(j * 4, true)\n\n    let al = this._a | 0\n    let bl = this._b | 0\n    let cl = this._c | 0\n    let dl = this._d | 0\n    let el = this._e | 0\n\n    let ar = this._a | 0\n    let br = this._b | 0\n    let cr = this._c | 0\n    let dr = this._d | 0\n    let er = this._e | 0\n\n    // computation\n    for (let i = 0; i < 80; i += 1) {\n      let tl\n      let tr\n      if (i < 16) {\n        tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n        tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n      } else if (i < 32) {\n        tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n        tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n      } else if (i < 48) {\n        tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n        tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n      } else if (i < 64) {\n        tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n        tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n      } else {\n        // if (i<80) {\n        tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n        tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n      }\n\n      al = el\n      el = dl\n      dl = rotl(cl, 10)\n      cl = bl\n      bl = tl\n\n      ar = er\n      er = dr\n      dr = rotl(cr, 10)\n      cr = br\n      br = tr\n    }\n\n    // update state\n    const t = (this._b + cl + dr) | 0\n    this._b = (this._c + dl + er) | 0\n    this._c = (this._d + el + ar) | 0\n    this._d = (this._e + al + br) | 0\n    this._e = (this._a + bl + cr) | 0\n    this._a = t\n  }\n\n  private _digest = () => {\n    // create padding and handle blocks\n    this._block[this._blockOffset++] = 0x80\n    if (this._blockOffset > 56) {\n      this._block.fill(0, this._blockOffset, 64)\n      this._update()\n      this._blockOffset = 0\n    }\n\n    this._block.fill(0, this._blockOffset, 56)\n    const temp = new DataView(this._block.buffer)\n    temp.setUint32(56, this._length[0], true)\n    temp.setUint32(60, this._length[1], true)\n    this._block = new Uint8Array(temp.buffer)\n    this._update()\n\n    // produce result\n    const buffer = new DataView(new Uint8Array(20).buffer)\n    buffer.setInt32(0, this._a, true)\n    buffer.setInt32(4, this._b, true)\n    buffer.setInt32(8, this._c, true)\n    buffer.setInt32(12, this._d, true)\n    buffer.setInt32(16, this._e, true)\n\n    return new Uint8Array(buffer.buffer)\n  }\n}\n","import { hash } from '@stablelib/sha256'\nimport { Ripemd160 } from './blockchains/utils/ripemd160'\nimport * as u8a from 'uint8arrays'\nimport sha3 from 'js-sha3'\n\nexport function sha256(payload: string | Uint8Array): Uint8Array {\n  const data = typeof payload === 'string' ? u8a.fromString(payload) : payload\n  return hash(data)\n}\n\nexport function keccak(data: Uint8Array): Uint8Array {\n  return new Uint8Array(sha3.keccak_256.arrayBuffer(data))\n}\n\nexport function toEthereumAddress(hexPublicKey: string): string {\n  const hashInput = u8a.fromString(hexPublicKey.slice(2), 'base16')\n  return `0x${u8a.toString(keccak(hashInput).slice(-20), 'base16')}`\n}\n\nexport function ripemd160(data: Uint8Array): Uint8Array {\n  return new Ripemd160().update(data).digest()\n}\n\nfunction writeUint32BE(value: number, array = new Uint8Array(4)): Uint8Array {\n  const encoded = u8a.fromString(value.toString(), 'base10')\n  array.set(encoded, 4 - encoded.length)\n  return array\n}\n\nconst lengthAndInput = (input: Uint8Array): Uint8Array => u8a.concat([writeUint32BE(input.length), input])\n\n// This implementation of concatKDF was inspired by these two implementations:\n// https://github.com/digitalbazaar/minimal-cipher/blob/master/algorithms/ecdhkdf.js\n// https://github.com/panva/jose/blob/master/lib/jwa/ecdh/derive.js\nexport function concatKDF(\n  secret: Uint8Array,\n  keyLen: number,\n  alg: string,\n  producerInfo?: Uint8Array,\n  consumerInfo?: Uint8Array\n): Uint8Array {\n  if (keyLen !== 256) throw new Error(`Unsupported key length: ${keyLen}`)\n  const value = u8a.concat([\n    lengthAndInput(u8a.fromString(alg)),\n    lengthAndInput(typeof producerInfo === 'undefined' ? new Uint8Array(0) : producerInfo), // apu\n    lengthAndInput(typeof consumerInfo === 'undefined' ? new Uint8Array(0) : consumerInfo), // apv\n    writeUint32BE(keyLen),\n  ])\n\n  // since our key lenght is 256 we only have to do one round\n  const roundNumber = 1\n  return sha256(u8a.concat([writeUint32BE(roundNumber), secret, value]))\n}\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\n/**\n *  Creates a configured signer function for signing data using the ES256K (secp256k1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @param    {Boolean}   recoverable  an optional flag to add the recovery param to the generated signatures\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256KSigner(privateKey: Uint8Array, recoverable = false): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256k1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s, recoveryParam }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose(\n      {\n        r: leftpad(r.toString('hex')),\n        s: leftpad(s.toString('hex')),\n        recoveryParam,\n      },\n      recoverable\n    )\n  }\n}\n","import { fromJose, hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The SimpleSigner returns a configured function for signing data.\n *\n *  @example\n *  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n *  signer(data, (err, signature) => {\n *    ...\n *  })\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                     a configured signer function\n */\nfunction SimpleSigner(hexPrivateKey: string): Signer {\n  const signer = ES256KSigner(hexToBytes(hexPrivateKey), true)\n  return async (data) => {\n    const signature = (await signer(data)) as string\n    return fromJose(signature)\n  }\n}\n\nexport default SimpleSigner\n","import { hexToBytes } from '../util'\nimport { Signer } from '../JWT'\nimport { ES256KSigner } from './ES256KSigner'\n\n/**\n * @deprecated Please use ES256KSigner\n *  The EllipticSigner returns a configured function for signing data.\n *\n *  @example\n *  ```typescript\n *  const signer = EllipticSigner(process.env.PRIVATE_KEY)\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *  ```\n *\n *  @param    {String}         hexPrivateKey    a hex encoded private key\n *  @return   {Function}                        a configured signer function\n */\nfunction EllipticSigner(hexPrivateKey: string): Signer {\n  return ES256KSigner(hexToBytes(hexPrivateKey))\n}\n\nexport default EllipticSigner\n","import { sign } from '@stablelib/ed25519'\nimport { Signer } from '../JWT'\nimport { bytesToBase64url, stringToBytes } from '../util'\n\n/**\n *  Creates a configured signer function for signing data using the EdDSA (Ed25519) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = EdDSASigner(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    secretKey   a 64 byte secret key as `Uint8Array`\n *  @return   {Function}              a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function EdDSASigner(secretKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = secretKey\n  if (privateKeyBytes.length !== 64) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 64 bytes, but got ${privateKeyBytes.length}`)\n  }\n  return async (data: string | Uint8Array): Promise<string> => {\n    const dataBytes: Uint8Array = typeof data === 'string' ? stringToBytes(data) : data\n    const sig: Uint8Array = sign(privateKeyBytes, dataBytes)\n    return bytesToBase64url(sig)\n  }\n}\n","import { EdDSASigner as EdDSASigner } from './EdDSASigner'\nimport { Signer } from '../JWT'\nimport { base64ToBytes } from '../util'\n\n/**\n * @deprecated Please use EdDSASigner\n *\n *  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm.\n *\n *  The signing function itself takes the data as a `string` or `Uint8Array` parameter and returns a `base64Url`-encoded signature.\n *\n *  @example\n *  const signer = NaclSigner(process.env.PRIVATE_KEY)\n *  const data: string = '...'\n *  signer(data).then( (signature: string) => {\n *    ...\n *  })\n *\n *  @param    {String}   base64PrivateKey    a 64 byte base64 encoded private key\n *  @return   {Function}                     a configured signer function\n */\n\nfunction NaclSigner(base64PrivateKey: string): Signer {\n  return EdDSASigner(base64ToBytes(base64PrivateKey))\n}\n\nexport default NaclSigner\n","import { leftpad } from '../util'\nimport { toJose } from '../util'\nimport { Signer } from '../JWT'\nimport { sha256 } from '../Digest'\nimport elliptic from 'elliptic'\n\nconst secp256r1 = new elliptic.ec('p256')\n\n/**\n *  Creates a configured signer function for signing data using the ES256 (secp256r1 + sha256) algorithm.\n *\n *  The signing function itself takes the data as a `Uint8Array` or `string` and returns a `base64Url`-encoded signature\n *\n *  @example\n *  ```typescript\n *  const sign: Signer = ES256Signer(process.env.PRIVATE_KEY)\n *  const signature: string = await sign(data)\n *  ```\n *\n *  @param    {String}    privateKey   a private key as `Uint8Array`\n *  @return   {Function}               a configured signer function `(data: string | Uint8Array): Promise<string>`\n */\nexport function ES256Signer(privateKey: Uint8Array): Signer {\n  const privateKeyBytes: Uint8Array = privateKey\n  if (privateKeyBytes.length !== 32) {\n    throw new Error(`bad_key: Invalid private key format. Expecting 32 bytes, but got ${privateKeyBytes.length}`)\n  }\n  const keyPair: elliptic.ec.KeyPair = secp256r1.keyFromPrivate(privateKeyBytes)\n\n  return async (data: string | Uint8Array): Promise<string> => {\n    const { r, s }: elliptic.ec.Signature = keyPair.sign(sha256(data))\n    return toJose({\n      r: leftpad(r.toString('hex')),\n      s: leftpad(s.toString('hex')),\n    })\n  }\n}\n","import { Signer, SignerAlgorithm } from './JWT'\nimport { EcdsaSignature, fromJose, toJose } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instanceOfEcdsaSignature(object: any): object is EcdsaSignature {\n  return typeof object === 'object' && 'r' in object && 's' in object\n}\n\nexport function ES256SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature)\n    } else {\n      return signature\n    }\n  }\n}\n\nexport function ES256KSignerAlg(recoverable?: boolean): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (instanceOfEcdsaSignature(signature)) {\n      return toJose(signature, recoverable)\n    } else {\n      if (recoverable && typeof fromJose(signature).recoveryParam === 'undefined') {\n        throw new Error(`not_supported: ES256K-R not supported when signer doesn't provide a recovery param`)\n      }\n      return signature\n    }\n  }\n}\n\nexport function Ed25519SignerAlg(): SignerAlgorithm {\n  return async function sign(payload: string, signer: Signer): Promise<string> {\n    const signature: EcdsaSignature | string = await signer(payload)\n    if (!instanceOfEcdsaSignature(signature)) {\n      return signature\n    } else {\n      throw new Error('invalid_config: expected a signer function that returns a string instead of signature object')\n    }\n  }\n}\n\ninterface SignerAlgorithms {\n  [alg: string]: SignerAlgorithm\n}\n\nconst algorithms: SignerAlgorithms = {\n  ES256: ES256SignerAlg(),\n  ES256K: ES256KSignerAlg(),\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': ES256KSignerAlg(true),\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: Ed25519SignerAlg(),\n  EdDSA: Ed25519SignerAlg(),\n}\n\nfunction SignerAlg(alg: string): SignerAlgorithm {\n  const impl: SignerAlgorithm = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nexport default SignerAlg\n","import * as u8a from 'uint8arrays'\nimport { bytesToBase58, base58ToBytes } from '../util'\nimport { sha256, ripemd160 } from '../Digest'\n\nexport const publicKeyToAddress = (publicKey: string, otherAddress: string): string => {\n  // Use the same version/prefix byte as the given address.\n  const version = u8a.toString(base58ToBytes(otherAddress).slice(0, 1), 'hex')\n  const publicKeyBuffer = u8a.fromString(publicKey, 'hex')\n  const publicKeyHash = ripemd160(sha256(publicKeyBuffer))\n  const step1 = version + u8a.toString(publicKeyHash, 'hex')\n  const step2 = sha256(u8a.fromString(step1, 'hex'))\n  const step3 = sha256(step2)\n  const checksum = u8a.toString(step3, 'hex').substring(0, 8)\n  const step4 = step1 + checksum\n  return bytesToBase58(u8a.fromString(step4, 'hex'))\n}\n","import elliptic from 'elliptic'\nimport { bech32 } from 'bech32'\nimport * as u8a from 'uint8arrays'\nimport { sha256, ripemd160 } from '../Digest'\n\nconst EC = elliptic.ec\n\nexport const publicKeyToAddress = (publicKey: string, prefix: string): string => {\n  const ec = new EC('secp256k1')\n  const compressedPublicKey = ec.keyFromPublic(publicKey, 'hex').getPublic().encode('hex', true)\n  const publicKeyBuffer = u8a.fromString(compressedPublicKey, 'hex')\n  const hash = ripemd160(sha256(publicKeyBuffer))\n  const words = bech32.toWords(hash)\n  return bech32.encode(prefix, words).replace(prefix, '')\n}\n","import { publicKeyToAddress as bip122 } from './bip122'\nimport { publicKeyToAddress as cosmos } from './cosmos'\nimport { toEthereumAddress } from '../Digest'\n\nexport const verifyBlockchainAccountId = (publicKey: string, blockchainAccountId: string | undefined): boolean => {\n  if (blockchainAccountId) {\n    const chain = blockchainAccountId.split(':')\n    switch (chain[0]) {\n      case 'bip122':\n        chain[chain.length - 1] = bip122(publicKey, chain[chain.length - 1])\n        break\n      case 'cosmos':\n        chain[chain.length - 1] = cosmos(publicKey, chain[1])\n        break\n      case 'eip155':\n        chain[chain.length - 1] = toEthereumAddress(publicKey)\n        break\n      default:\n        return false\n    }\n    return chain.join(':').toLowerCase() === blockchainAccountId.toLowerCase()\n  }\n  return false\n}\n","import type { SignatureInput } from 'elliptic'\nimport elliptic from 'elliptic'\nimport { sha256, toEthereumAddress } from './Digest'\nimport { verify } from '@stablelib/ed25519'\nimport type { VerificationMethod } from 'did-resolver'\nimport { bases } from 'multiformats/basics'\nimport { hexToBytes, base58ToBytes, base64ToBytes, bytesToHex, EcdsaSignature, stringToBytes } from './util'\nimport { verifyBlockchainAccountId } from './blockchains'\n\nconst secp256k1 = new elliptic.ec('secp256k1')\nconst secp256r1 = new elliptic.ec('p256')\n\n// converts a JOSE signature to it's components\nexport function toSignatureObject(signature: string, recoverable = false): EcdsaSignature {\n  const rawSig: Uint8Array = base64ToBytes(signature)\n  if (rawSig.length !== (recoverable ? 65 : 64)) {\n    throw new Error('wrong signature length')\n  }\n  const r: string = bytesToHex(rawSig.slice(0, 32))\n  const s: string = bytesToHex(rawSig.slice(32, 64))\n  const sigObj: EcdsaSignature = { r, s }\n  if (recoverable) {\n    sigObj.recoveryParam = rawSig[64]\n  }\n  return sigObj\n}\n\ninterface LegacyVerificationMethod extends VerificationMethod {\n  publicKeyBase64: string\n}\n\nfunction extractPublicKeyBytes(pk: VerificationMethod): Uint8Array {\n  if (pk.publicKeyBase58) {\n    return base58ToBytes(pk.publicKeyBase58)\n  } else if ((<LegacyVerificationMethod>pk).publicKeyBase64) {\n    return base64ToBytes((<LegacyVerificationMethod>pk).publicKeyBase64)\n  } else if (pk.publicKeyHex) {\n    return hexToBytes(pk.publicKeyHex)\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'secp256k1' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256k1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (pk.publicKeyJwk && pk.publicKeyJwk.crv === 'P-256' && pk.publicKeyJwk.x && pk.publicKeyJwk.y) {\n    return hexToBytes(\n      secp256r1\n        .keyFromPublic({\n          x: bytesToHex(base64ToBytes(pk.publicKeyJwk.x)),\n          y: bytesToHex(base64ToBytes(pk.publicKeyJwk.y)),\n        })\n        .getPublic('hex')\n    )\n  } else if (\n    pk.publicKeyJwk &&\n    pk.publicKeyJwk.kty === 'OKP' &&\n    pk.publicKeyJwk.crv === 'Ed25519' &&\n    pk.publicKeyJwk.x\n  ) {\n    return base64ToBytes(pk.publicKeyJwk.x)\n  } else if (pk.publicKeyMultibase) {\n    const { base16, base58btc, base64, base64url } = bases\n    const baseDecoder = base16.decoder.or(base58btc.decoder.or(base64.decoder.or(base64url.decoder)))\n    return baseDecoder.decode(pk.publicKeyMultibase)\n  }\n  return new Uint8Array()\n}\n\nexport function verifyES256(data: string, signature: string, authenticators: VerificationMethod[]): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n\n  const signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256r1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const hash: Uint8Array = sha256(data)\n  const sigObj: EcdsaSignature = toSignatureObject(signature)\n  const fullPublicKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress === 'undefined' && typeof blockchainAccountId === 'undefined'\n  })\n  const blockchainAddressKeys = authenticators.filter(({ ethereumAddress, blockchainAccountId }) => {\n    return typeof ethereumAddress !== 'undefined' || typeof blockchainAccountId !== 'undefined'\n  })\n\n  let signer: VerificationMethod | undefined = fullPublicKeys.find((pk: VerificationMethod) => {\n    try {\n      const pubBytes = extractPublicKeyBytes(pk)\n      return secp256k1.keyFromPublic(pubBytes).verify(hash, <SignatureInput>sigObj)\n    } catch (err) {\n      return false\n    }\n  })\n\n  if (!signer && blockchainAddressKeys.length > 0) {\n    signer = verifyRecoverableES256K(data, signature, blockchainAddressKeys)\n  }\n\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\nexport function verifyRecoverableES256K(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  let signatures: EcdsaSignature[]\n  if (signature.length > 86) {\n    signatures = [toSignatureObject(signature, true)]\n  } else {\n    const so = toSignatureObject(signature, false)\n    signatures = [\n      { ...so, recoveryParam: 0 },\n      { ...so, recoveryParam: 1 },\n    ]\n  }\n\n  const checkSignatureAgainstSigner = (sigObj: EcdsaSignature): VerificationMethod | undefined => {\n    const hash: Uint8Array = sha256(data)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const recoveredKey: any = secp256k1.recoverPubKey(hash, <SignatureInput>sigObj, <number>sigObj.recoveryParam)\n    const recoveredPublicKeyHex: string = recoveredKey.encode('hex')\n    const recoveredCompressedPublicKeyHex: string = recoveredKey.encode('hex', true)\n    const recoveredAddress: string = toEthereumAddress(recoveredPublicKeyHex).toLowerCase()\n\n    const signer: VerificationMethod | undefined = authenticators.find((pk: VerificationMethod) => {\n      const keyHex = bytesToHex(extractPublicKeyBytes(pk))\n      return (\n        keyHex === recoveredPublicKeyHex ||\n        keyHex === recoveredCompressedPublicKeyHex ||\n        pk.ethereumAddress?.toLowerCase() === recoveredAddress ||\n        pk.blockchainAccountId?.split('@eip155')?.[0].toLowerCase() === recoveredAddress || // CAIP-2\n        verifyBlockchainAccountId(recoveredPublicKeyHex, pk.blockchainAccountId) // CAIP-10\n      )\n    })\n\n    return signer\n  }\n\n  const signer: VerificationMethod[] = signatures\n    .map(checkSignatureAgainstSigner)\n    .filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n\n  if (signer.length === 0) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer[0]\n}\n\nexport function verifyEd25519(\n  data: string,\n  signature: string,\n  authenticators: VerificationMethod[]\n): VerificationMethod {\n  const clear: Uint8Array = stringToBytes(data)\n  const sig: Uint8Array = base64ToBytes(signature)\n  const signer = authenticators.find((pk: VerificationMethod) => {\n    return verify(extractPublicKeyBytes(pk), clear, sig)\n  })\n  if (!signer) throw new Error('invalid_signature: Signature invalid for JWT')\n  return signer\n}\n\ntype Verifier = (data: string, signature: string, authenticators: VerificationMethod[]) => VerificationMethod\ninterface Algorithms {\n  [name: string]: Verifier\n}\nconst algorithms: Algorithms = {\n  ES256: verifyES256,\n  ES256K: verifyES256K,\n  // This is a non-standard algorithm but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/146\n  'ES256K-R': verifyRecoverableES256K,\n  // This is actually incorrect but retained for backwards compatibility\n  // see https://github.com/decentralized-identity/did-jwt/issues/130\n  Ed25519: verifyEd25519,\n  EdDSA: verifyEd25519,\n}\n\nfunction VerifierAlgorithm(alg: string): Verifier {\n  const impl: Verifier = algorithms[alg]\n  if (!impl) throw new Error(`not_supported: Unsupported algorithm ${alg}`)\n  return impl\n}\n\nVerifierAlgorithm.toSignatureObject = toSignatureObject\n\nexport default VerifierAlgorithm\n","/**\n * Error prefixes used for known verification failure cases.\n *\n * For compatibility, these error prefixes match the existing error messages, but will be adjusted in a future major\n * version update to match the scenarios better.\n *\n * @beta\n */\nexport const JWT_ERROR = {\n  /**\n   * Thrown when a JWT payload schema is unexpected or when validity period does not match\n   */\n  INVALID_JWT: 'invalid_jwt',\n  /**\n   * Thrown when the verifier audience does not match the one set in the JWT payload\n   */\n  INVALID_AUDIENCE: 'invalid_config',\n  /**\n   * Thrown when none of the public keys of the issuer match the signature of the JWT.\n   *\n   * This is equivalent to `NO_SUITABLE_KEYS` when the `proofPurpose` is NOT specified.\n   */\n  INVALID_SIGNATURE: 'invalid_signature',\n  /**\n   * Thrown when the DID document of the issuer does not have any keys that match the signature for the given\n   * `proofPurpose`.\n   *\n   * This is equivalent to `invalid_signature`, when a `proofPurpose` is specified.\n   */\n  NO_SUITABLE_KEYS: 'no_suitable_keys',\n  /**\n   * Thrown when the `alg` of the JWT or the encoding of the key is not supported\n   */\n  NOT_SUPPORTED: 'not_supported',\n  /**\n   * Thrown when the DID resolver is unable to resolve the issuer DID.\n   */\n  RESOLVER_ERROR: 'resolver_error',\n}\n","import canonicalizeData from 'canonicalize'\nimport type { DIDDocument, DIDResolutionResult, Resolvable, VerificationMethod } from 'did-resolver'\nimport SignerAlg from './SignerAlgorithm'\nimport { decodeBase64url, EcdsaSignature, encodeBase64url } from './util'\nimport VerifierAlgorithm from './VerifierAlgorithm'\nimport { JWT_ERROR } from './Errors'\n\nexport type Signer = (data: string | Uint8Array) => Promise<EcdsaSignature | string>\nexport type SignerAlgorithm = (payload: string, signer: Signer) => Promise<string>\n\nexport type ProofPurposeTypes =\n  | 'assertionMethod'\n  | 'authentication'\n  // | 'keyAgreement' // keyAgreement VerificationMethod should not be used for signing\n  | 'capabilityDelegation'\n  | 'capabilityInvocation'\n\nexport interface JWTOptions {\n  issuer: string\n  signer: Signer\n  /**\n   * @deprecated Please use `header.alg` to specify the JWT algorithm.\n   */\n  alg?: string\n  expiresIn?: number\n  canonicalize?: boolean\n}\n\nexport interface JWTVerifyOptions {\n  /** @deprecated Please use `proofPurpose: 'authentication' instead` */\n  auth?: boolean\n  audience?: string\n  callbackUrl?: string\n  resolver?: Resolvable\n  skewTime?: number\n  /** See https://www.w3.org/TR/did-spec-registries/#verification-relationships */\n  proofPurpose?: ProofPurposeTypes\n  policies?: JWTVerifyPolicies\n}\n\n/**\n * Overrides the different types of checks performed on the JWT besides the signature check\n */\nexport interface JWTVerifyPolicies {\n  // overrides the timestamp against which the validity interval is checked\n  now?: number\n  // when set to false, the timestamp checks ignore the Not Before(`nbf`) property\n  nbf?: boolean\n  // when set to false, the timestamp checks ignore the Issued At(`iat`) property\n  iat?: boolean\n  // when set to false, the timestamp checks ignore the Expires At(`exp`) property\n  exp?: boolean\n  // when set to false, the JWT audience check is skipped\n  aud?: boolean\n}\n\nexport interface JWSCreationOptions {\n  canonicalize?: boolean\n}\n\nexport interface DIDAuthenticator {\n  authenticators: VerificationMethod[]\n  issuer: string\n  didResolutionResult: DIDResolutionResult\n}\n\nexport interface JWTHeader {\n  typ: 'JWT'\n  alg: string\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTPayload {\n  iss?: string\n  sub?: string\n  aud?: string | string[]\n  iat?: number\n  nbf?: number\n  exp?: number\n  rexp?: number\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [x: string]: any\n}\n\nexport interface JWTDecoded {\n  header: JWTHeader\n  payload: JWTPayload\n  signature: string\n  data: string\n}\n\nexport interface JWSDecoded {\n  header: JWTHeader\n  payload: string\n  signature: string\n  data: string\n}\n\n/**\n * Result object returned by {@link verifyJWT}\n */\nexport interface JWTVerified {\n  /**\n   * Set to true for a JWT that passes all the required checks minus any verification overrides.\n   */\n  verified: true\n\n  /**\n   * The decoded JWT payload\n   */\n  payload: Partial<JWTPayload>\n\n  /**\n   * The result of resolving the issuer DID\n   */\n  didResolutionResult: DIDResolutionResult\n\n  /**\n   * the issuer DID\n   */\n  issuer: string\n\n  /**\n   * The public key of the issuer that matches the JWT signature\n   */\n  signer: VerificationMethod\n\n  /**\n   * The original JWT that was verified\n   */\n  jwt: string\n\n  /**\n   * Any overrides that were used during verification\n   */\n  policies?: JWTVerifyPolicies\n}\n\nexport interface PublicKeyTypes {\n  [name: string]: string[]\n}\n\nexport const SUPPORTED_PUBLIC_KEY_TYPES: PublicKeyTypes = {\n  ES256: ['JsonWebKey2020'],\n  ES256K: [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n    'JsonWebKey2020',\n  ],\n  'ES256K-R': [\n    'EcdsaSecp256k1VerificationKey2019',\n    /**\n     * Equivalent to EcdsaSecp256k1VerificationKey2019 when key is an ethereumAddress\n     */\n    'EcdsaSecp256k1RecoveryMethod2020',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1VerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'Secp256k1SignatureVerificationKey2018',\n    /**\n     * @deprecated, supported for backward compatibility. Equivalent to EcdsaSecp256k1VerificationKey2019 when key is\n     *   not an ethereumAddress\n     */\n    'EcdsaPublicKeySecp256k1',\n    'JsonWebKey2020',\n  ],\n  Ed25519: [\n    'ED25519SignatureVerification',\n    'Ed25519VerificationKey2018',\n    'Ed25519VerificationKey2020',\n    'JsonWebKey2020',\n  ],\n  EdDSA: ['ED25519SignatureVerification', 'Ed25519VerificationKey2018', 'Ed25519VerificationKey2020', 'JsonWebKey2020'],\n}\n\nexport const SELF_ISSUED_V2 = 'https://self-issued.me/v2'\nexport const SELF_ISSUED_V2_VC_INTEROP = 'https://self-issued.me/v2/openid-vc' // https://identity.foundation/jwt-vc-presentation-profile/#id-token-validation\nexport const SELF_ISSUED_V0_1 = 'https://self-issued.me'\n\ntype LegacyVerificationMethod = { publicKey?: string }\n\nconst defaultAlg = 'ES256K'\nconst DID_JSON = 'application/did+json'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction encodeSection(data: any, shouldCanonicalize = false): string {\n  if (shouldCanonicalize) {\n    return encodeBase64url(<string>canonicalizeData(data))\n  } else {\n    return encodeBase64url(JSON.stringify(data))\n  }\n}\n\nexport const NBF_SKEW = 300\n\nfunction decodeJWS(jws: string): JWSDecoded {\n  const parts = jws.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/)\n  if (parts) {\n    return {\n      header: JSON.parse(decodeBase64url(parts[1])),\n      payload: parts[2],\n      signature: parts[3],\n      data: `${parts[1]}.${parts[2]}`,\n    }\n  }\n  throw new Error('invalid_argument: Incorrect format JWS')\n}\n\n/**  @module did-jwt/JWT */\n\n/**\n *  Decodes a JWT and returns an object representing the payload\n *\n *  @example\n *  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1...')\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @return   {Object}                               a JS object representing the decoded JWT\n */\nexport function decodeJWT(jwt: string): JWTDecoded {\n  if (!jwt) throw new Error('invalid_argument: no JWT passed into decodeJWT')\n  try {\n    const jws = decodeJWS(jwt)\n    const decodedJwt: JWTDecoded = Object.assign(jws, { payload: JSON.parse(decodeBase64url(jws.payload)) })\n    return decodedJwt\n  } catch (e) {\n    throw new Error('invalid_argument: Incorrect format JWT')\n  }\n}\n\n/**\n *  Creates a signed JWS given a payload, a signer, and an optional header.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  const jws = await createJWS({ my: 'payload' }, signer)\n *\n *  @param    {Object}            payload           payload object\n *  @param    {Signer}            signer            a signer, see `ES256KSigner or `EdDSASigner`\n *  @param    {Object}            header            optional object to specify or customize the JWS header\n *  @param    {Object}            options           can be used to trigger automatic canonicalization of header and\n *                                                    payload properties\n *  @return   {Promise<string>}                     a Promise which resolves to a JWS string or rejects with an error\n */\nexport async function createJWS(\n  payload: string | Partial<JWTPayload>,\n  signer: Signer,\n  header: Partial<JWTHeader> = {},\n  options: JWSCreationOptions = {}\n): Promise<string> {\n  if (!header.alg) header.alg = defaultAlg\n  const encodedPayload = typeof payload === 'string' ? payload : encodeSection(payload, options.canonicalize)\n  const signingInput: string = [encodeSection(header, options.canonicalize), encodedPayload].join('.')\n\n  const jwtSigner: SignerAlgorithm = SignerAlg(header.alg)\n  const signature: string = await jwtSigner(signingInput, signer)\n  return [signingInput, signature].join('.')\n}\n\n/**\n *  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is\n * over.\n *\n *  @example\n *  const signer = ES256KSigner(process.env.PRIVATE_KEY)\n *  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n *      ...\n *  })\n *\n *  @param    {Object}            payload               payload object\n *  @param    {Object}            [options]             an unsigned credential object\n *  @param    {String}            options.issuer        The DID of the issuer (signer) of JWT\n *  @param    {String}            options.alg           [DEPRECATED] The JWT signing algorithm to use. Supports:\n *   [ES256K, ES256K-R, Ed25519, EdDSA], Defaults to: ES256K. Please use `header.alg` to specify the algorithm\n *  @param    {Signer}            options.signer        a `Signer` function, Please see `ES256KSigner` or `EdDSASigner`\n *  @param    {boolean}           options.canonicalize  optional flag to canonicalize header and payload before signing\n *  @param    {Object}            header                optional object to specify or customize the JWT header\n *  @return   {Promise<Object, Error>}                  a promise which resolves with a signed JSON Web Token or\n *   rejects with an error\n */\nexport async function createJWT(\n  payload: Partial<JWTPayload>,\n  { issuer, signer, alg, expiresIn, canonicalize }: JWTOptions,\n  header: Partial<JWTHeader> = {}\n): Promise<string> {\n  if (!signer) throw new Error('missing_signer: No Signer functionality has been configured')\n  if (!issuer) throw new Error('missing_issuer: No issuing DID has been configured')\n  if (!header.typ) header.typ = 'JWT'\n  if (!header.alg) header.alg = alg\n  const timestamps: Partial<JWTPayload> = {\n    iat: Math.floor(Date.now() / 1000),\n    exp: undefined,\n  }\n  if (expiresIn) {\n    if (typeof expiresIn === 'number') {\n      timestamps.exp = <number>(payload.nbf || timestamps.iat) + Math.floor(expiresIn)\n    } else {\n      throw new Error('invalid_argument: JWT expiresIn is not a number')\n    }\n  }\n  const fullPayload = { ...timestamps, ...payload, iss: issuer }\n  return createJWS(fullPayload, signer, header, { canonicalize })\n}\n\nfunction verifyJWSDecoded(\n  { header, data, signature }: JWSDecoded,\n  pubKeys: VerificationMethod | VerificationMethod[]\n): VerificationMethod {\n  if (!Array.isArray(pubKeys)) pubKeys = [pubKeys]\n  const signer: VerificationMethod = VerifierAlgorithm(header.alg)(data, signature, pubKeys)\n  return signer\n}\n\n/**\n *  Verifies given JWS. If the JWS is valid, returns the public key that was\n *  used to sign the JWS, or throws an `Error` if none of the `pubKeys` match.\n *\n *  @example\n *  const pubKey = verifyJWS('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', { publicKeyHex: '0x12341...' })\n *\n *  @param    {String}                          jws         A JWS string to verify\n *  @param    {Array<VerificationMethod> | VerificationMethod}    pubKeys     The public keys used to verify the JWS\n *  @return   {VerificationMethod}                       The public key used to sign the JWS\n */\nexport function verifyJWS(jws: string, pubKeys: VerificationMethod | VerificationMethod[]): VerificationMethod {\n  const jwsDecoded: JWSDecoded = decodeJWS(jws)\n  return verifyJWSDecoded(jwsDecoded, pubKeys)\n}\n\n/**\n *  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n *  and the DID document of the issuer of the JWT.\n *\n *  @example\n *  ```ts\n *  verifyJWT(\n *      'did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....',\n *      {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}\n *    ).then(obj => {\n *        const did = obj.did // DID of signer\n *        const payload = obj.payload\n *        const doc = obj.didResolutionResult.didDocument // DID Document of issuer\n *        const jwt = obj.jwt\n *        const signerKeyId = obj.signer.id // ID of key in DID document that signed JWT\n *        ...\n *    })\n *  ```\n *\n *  @param    {String}            jwt                a JSON Web Token to verify\n *  @param    {Object}            [options]           an unsigned credential object\n *  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the\n *   DID document (for Authentication purposes)\n *  @param    {String}            options.audience    DID of the recipient of the JWT\n *  @param    {String}            options.callbackUrl callback url in JWT\n *  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an\n *   error\n */\nexport async function verifyJWT(\n  jwt: string,\n  options: JWTVerifyOptions = {\n    resolver: undefined,\n    auth: undefined,\n    audience: undefined,\n    callbackUrl: undefined,\n    skewTime: undefined,\n    proofPurpose: undefined,\n    policies: {},\n  }\n): Promise<JWTVerified> {\n  if (!options.resolver) throw new Error('missing_resolver: No DID resolver has been configured')\n  const { payload, header, signature, data }: JWTDecoded = decodeJWT(jwt)\n  const proofPurpose: ProofPurposeTypes | undefined = Object.prototype.hasOwnProperty.call(options, 'auth')\n    ? options.auth\n      ? 'authentication'\n      : undefined\n    : options.proofPurpose\n\n  let did\n\n  if (!payload.iss && !payload.client_id) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT iss or client_id are required`)\n  }\n\n  if (payload.iss === SELF_ISSUED_V2 || payload.iss === SELF_ISSUED_V2_VC_INTEROP) {\n    if (!payload.sub) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT sub is required`)\n    }\n    if (typeof payload.sub_jwk === 'undefined') {\n      did = payload.sub\n    } else {\n      did = (header.kid || '').split('#')[0]\n    }\n  } else if (payload.iss === SELF_ISSUED_V0_1) {\n    if (!payload.did) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT did is required`)\n    }\n    did = payload.did\n  } else if (!payload.iss && payload.scope === 'openid' && payload.redirect_uri) {\n    // SIOP Request payload\n    // https://identity.foundation/jwt-vc-presentation-profile/#self-issued-op-request-object\n    if (!payload.client_id) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT client_id is required`)\n    }\n    did = payload.client_id\n  } else {\n    did = payload.iss\n  }\n\n  if (!did) {\n    throw new Error(`${JWT_ERROR.INVALID_JWT}: No DID has been found in the JWT`)\n  }\n\n  const { didResolutionResult, authenticators, issuer }: DIDAuthenticator = await resolveAuthenticator(\n    options.resolver,\n    header.alg,\n    did,\n    proofPurpose\n  )\n  const signer: VerificationMethod = await verifyJWSDecoded({ header, data, signature } as JWSDecoded, authenticators)\n  const now: number = typeof options.policies?.now === 'number' ? options.policies.now : Math.floor(Date.now() / 1000)\n  const skewTime = typeof options.skewTime !== 'undefined' && options.skewTime >= 0 ? options.skewTime : NBF_SKEW\n  if (signer) {\n    const nowSkewed = now + skewTime\n    if (options.policies?.nbf !== false && payload.nbf) {\n      if (payload.nbf > nowSkewed) {\n        throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid before nbf: ${payload.nbf}`)\n      }\n    } else if (options.policies?.iat !== false && payload.iat && payload.iat > nowSkewed) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT not valid yet (issued in the future) iat: ${payload.iat}`)\n    }\n    if (options.policies?.exp !== false && payload.exp && payload.exp <= now - skewTime) {\n      throw new Error(`${JWT_ERROR.INVALID_JWT}: JWT has expired: exp: ${payload.exp} < now: ${now}`)\n    }\n    if (options.policies?.aud !== false && payload.aud) {\n      if (!options.audience && !options.callbackUrl) {\n        throw new Error(\n          `${JWT_ERROR.INVALID_AUDIENCE}: JWT audience is required but your app address has not been configured`\n        )\n      }\n      const audArray = Array.isArray(payload.aud) ? payload.aud : [payload.aud]\n      const matchedAudience = audArray.find((item) => options.audience === item || options.callbackUrl === item)\n\n      if (typeof matchedAudience === 'undefined') {\n        throw new Error(`${JWT_ERROR.INVALID_AUDIENCE}: JWT audience does not match your DID or callback url`)\n      }\n    }\n    return { verified: true, payload, didResolutionResult, issuer, signer, jwt, policies: options.policies }\n  }\n  throw new Error(\n    `${JWT_ERROR.INVALID_SIGNATURE}: JWT not valid. issuer DID document does not contain a verificationMethod that matches the signature.`\n  )\n}\n\n/**\n * Resolves relevant public keys or other authenticating material used to verify signature from the DID document of\n * provided DID\n *\n *  @example\n *  ```ts\n *  resolveAuthenticator(resolver, 'ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n *      const payload = obj.payload\n *      const profile = obj.profile\n *      const jwt = obj.jwt\n *      // ...\n *  })\n *  ```\n *\n *  @param resolver - {Resolvable} a DID resolver function that can obtain the `DIDDocument` for the `issuer`\n *  @param alg - {String} a JWT algorithm\n *  @param issuer - {String} a Decentralized Identifier (DID) to lookup\n *  @param proofPurpose - {ProofPurposeTypes} *Optional* Use the verificationMethod linked in that section of the\n *   issuer DID document\n *  @return {Promise<DIDAuthenticator>} a promise which resolves with an object containing an array of authenticators\n *   or rejects with an error if none exist\n */\nexport async function resolveAuthenticator(\n  resolver: Resolvable,\n  alg: string,\n  issuer: string,\n  proofPurpose?: ProofPurposeTypes\n): Promise<DIDAuthenticator> {\n  const types: string[] = SUPPORTED_PUBLIC_KEY_TYPES[alg]\n  if (!types || types.length === 0) {\n    throw new Error(`${JWT_ERROR.NOT_SUPPORTED}: No supported signature types for algorithm ${alg}`)\n  }\n  let didResult: DIDResolutionResult\n\n  const result = (await resolver.resolve(issuer, { accept: DID_JSON })) as unknown\n  // support legacy resolvers that do not produce DIDResolutionResult\n  if (Object.getOwnPropertyNames(result).indexOf('didDocument') === -1) {\n    didResult = {\n      didDocument: result as DIDDocument,\n      didDocumentMetadata: {},\n      didResolutionMetadata: { contentType: DID_JSON },\n    }\n  } else {\n    didResult = result as DIDResolutionResult\n  }\n\n  if (didResult.didResolutionMetadata?.error || didResult.didDocument == null) {\n    const { error, message } = didResult.didResolutionMetadata\n    throw new Error(\n      `${JWT_ERROR.RESOLVER_ERROR}: Unable to resolve DID document for ${issuer}: ${error}, ${message || ''}`\n    )\n  }\n\n  const getPublicKeyById = (verificationMethods: VerificationMethod[], pubid?: string): VerificationMethod | null => {\n    const filtered = verificationMethods.filter(({ id }) => pubid === id)\n    return filtered.length > 0 ? filtered[0] : null\n  }\n\n  let publicKeysToCheck: VerificationMethod[] = [\n    ...(didResult?.didDocument?.verificationMethod || []),\n    ...(didResult?.didDocument?.publicKey || []),\n  ]\n  if (typeof proofPurpose === 'string') {\n    // support legacy DID Documents that do not list assertionMethod\n    if (\n      proofPurpose.startsWith('assertion') &&\n      !Object.getOwnPropertyNames(didResult?.didDocument).includes('assertionMethod')\n    ) {\n      didResult.didDocument = { ...(<DIDDocument>didResult.didDocument) }\n      didResult.didDocument.assertionMethod = [...publicKeysToCheck.map((pk) => pk.id)]\n    }\n\n    publicKeysToCheck = (didResult.didDocument[proofPurpose] || [])\n      .map((verificationMethod) => {\n        if (typeof verificationMethod === 'string') {\n          return getPublicKeyById(publicKeysToCheck, verificationMethod)\n        } else if (typeof (<LegacyVerificationMethod>verificationMethod).publicKey === 'string') {\n          // this is a legacy format\n          return getPublicKeyById(publicKeysToCheck, (<LegacyVerificationMethod>verificationMethod).publicKey)\n        } else {\n          return <VerificationMethod>verificationMethod\n        }\n      })\n      .filter((key) => key != null) as VerificationMethod[]\n  }\n\n  const authenticators: VerificationMethod[] = publicKeysToCheck.filter(({ type }) =>\n    types.find((supported) => supported === type)\n  )\n\n  if (typeof proofPurpose === 'string' && (!authenticators || authenticators.length === 0)) {\n    throw new Error(\n      `${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys suitable for ${alg} with ${proofPurpose} purpose`\n    )\n  }\n  if (!authenticators || authenticators.length === 0) {\n    throw new Error(`${JWT_ERROR.NO_SUITABLE_KEYS}: DID document for ${issuer} does not have public keys for ${alg}`)\n  }\n  return { authenticators, issuer, didResolutionResult: didResult }\n}\n","import { fromString } from 'uint8arrays'\nimport { base64ToBytes, bytesToBase64url, decodeBase64url, toSealed } from './util'\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ProtectedHeader = Record<string, any> & Partial<RecipientHeader>\n\n/**\n * The JWK representation of an ephemeral public key.\n * See https://www.rfc-editor.org/rfc/rfc7518.html#section-6\n */\ninterface EphemeralPublicKey {\n  kty?: string\n  //ECC\n  crv?: string\n  x?: string\n  y?: string\n  //RSA\n  n?: string\n  e?: string\n}\n\nexport interface RecipientHeader {\n  alg: string\n  iv: string\n  tag: string\n  epk?: EphemeralPublicKey\n  kid?: string\n  apv?: string\n  apu?: string\n}\n\nexport interface Recipient {\n  header: RecipientHeader\n  encrypted_key: string\n}\n\nexport interface JWE {\n  protected: string\n  iv: string\n  ciphertext: string\n  tag: string\n  aad?: string\n  recipients?: Recipient[]\n}\n\nexport interface EncryptionResult {\n  ciphertext: Uint8Array\n  tag: Uint8Array\n  iv: Uint8Array\n  protectedHeader?: string\n  recipient?: Recipient\n  cek?: Uint8Array\n}\n\nexport interface Encrypter {\n  alg: string\n  enc: string\n  encrypt: (cleartext: Uint8Array, protectedHeader: ProtectedHeader, aad?: Uint8Array) => Promise<EncryptionResult>\n  encryptCek?: (cek: Uint8Array) => Promise<Recipient>\n}\n\nexport interface Decrypter {\n  alg: string\n  enc: string\n  decrypt: (sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array, recipient?: Recipient) => Promise<Uint8Array | null>\n}\n\nfunction validateJWE(jwe: JWE) {\n  if (!(jwe.protected && jwe.iv && jwe.ciphertext && jwe.tag)) {\n    throw new Error('bad_jwe: missing properties')\n  }\n  if (jwe.recipients) {\n    jwe.recipients.map((rec) => {\n      if (!(rec.header && rec.encrypted_key)) {\n        throw new Error('bad_jwe: malformed recipients')\n      }\n    })\n  }\n}\n\nfunction encodeJWE({ ciphertext, tag, iv, protectedHeader, recipient }: EncryptionResult, aad?: Uint8Array): JWE {\n  const jwe: JWE = {\n    protected: <string>protectedHeader,\n    iv: bytesToBase64url(iv),\n    ciphertext: bytesToBase64url(ciphertext),\n    tag: bytesToBase64url(tag),\n  }\n  if (aad) jwe.aad = bytesToBase64url(aad)\n  if (recipient) jwe.recipients = [recipient]\n  return jwe\n}\n\nexport async function createJWE(\n  cleartext: Uint8Array,\n  encrypters: Encrypter[],\n  protectedHeader = {},\n  aad?: Uint8Array\n): Promise<JWE> {\n  if (encrypters[0].alg === 'dir') {\n    if (encrypters.length > 1) throw new Error('not_supported: Can only do \"dir\" encryption to one key.')\n    const encryptionResult = await encrypters[0].encrypt(cleartext, protectedHeader, aad)\n    return encodeJWE(encryptionResult, aad)\n  } else {\n    const tmpEnc = encrypters[0].enc\n    if (!encrypters.reduce((acc, encrypter) => acc && encrypter.enc === tmpEnc, true)) {\n      throw new Error('invalid_argument: Incompatible encrypters passed')\n    }\n    let cek\n    let jwe\n    for (const encrypter of encrypters) {\n      if (!cek) {\n        const encryptionResult = await encrypter.encrypt(cleartext, protectedHeader, aad)\n        cek = encryptionResult.cek\n        jwe = encodeJWE(encryptionResult, aad)\n      } else {\n        const recipient = await encrypter.encryptCek?.(cek)\n        if (recipient) {\n          jwe?.recipients?.push(recipient)\n        }\n      }\n    }\n    return <JWE>jwe\n  }\n}\n\nexport async function decryptJWE(jwe: JWE, decrypter: Decrypter): Promise<Uint8Array> {\n  validateJWE(jwe)\n  const protHeader = JSON.parse(decodeBase64url(jwe.protected))\n  if (protHeader.enc !== decrypter.enc)\n    throw new Error(`not_supported: Decrypter does not supported: '${protHeader.enc}'`)\n  const sealed = toSealed(jwe.ciphertext, jwe.tag)\n  const aad = fromString(jwe.aad ? `${jwe.protected}.${jwe.aad}` : jwe.protected)\n  let cleartext = null\n  if (protHeader.alg === 'dir' && decrypter.alg === 'dir') {\n    cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad)\n  } else if (!jwe.recipients || jwe.recipients.length === 0) {\n    throw new Error('bad_jwe: missing recipients')\n  } else {\n    for (let i = 0; !cleartext && i < jwe.recipients.length; i++) {\n      const recipient = jwe.recipients[i]\n      Object.assign(recipient.header, protHeader)\n      if (recipient.header.alg === decrypter.alg) {\n        cleartext = await decrypter.decrypt(sealed, base64ToBytes(jwe.iv), aad, recipient)\n      }\n    }\n  }\n  if (cleartext === null) throw new Error('failure: Failed to decrypt')\n  return cleartext\n}\n","import { sharedKey } from '@stablelib/x25519'\n\n/**\n * A wrapper around `mySecretKey` that can compute a shared secret using `theirPublicKey`.\n * The promise should resolve to a `Uint8Array` containing the raw shared secret.\n *\n * This method is meant to be used when direct access to a secret key is impossible or not desired.\n *\n * @param theirPublicKey `Uint8Array` the other party's public key\n * @returns a `Promise` that resolves to a `Uint8Array` representing the computed shared secret\n */\nexport type ECDH = (theirPublicKey: Uint8Array) => Promise<Uint8Array>\n\n/**\n * Wraps an X25519 secret key into an ECDH method that can be used to compute a shared secret with a public key.\n * @param mySecretKey A `Uint8Array` of length 32 representing the bytes of my secret key\n * @returns an `ECDH` method with the signature `(theirPublicKey: Uint8Array) => Promise<Uint8Array>`\n *\n * @throws 'invalid_argument:...' if the secret key size is wrong\n */\nexport function createX25519ECDH(mySecretKey: Uint8Array): ECDH {\n  if (mySecretKey.length !== 32) {\n    throw new Error('invalid_argument: incorrect secret key length for X25519')\n  }\n  return async (theirPublicKey: Uint8Array): Promise<Uint8Array> => {\n    if (theirPublicKey.length !== 32) {\n      throw new Error('invalid_argument: incorrect publicKey key length for X25519')\n    }\n    return sharedKey(mySecretKey, theirPublicKey)\n  }\n}\n","import { XChaCha20Poly1305 } from '@stablelib/xchacha20poly1305'\nimport { generateKeyPair, sharedKey } from '@stablelib/x25519'\nimport { randomBytes } from '@stablelib/random'\nimport { concatKDF } from './Digest'\nimport { bytesToBase64url, base58ToBytes, encodeBase64url, toSealed, base64ToBytes } from './util'\nimport { Recipient, EncryptionResult, Encrypter, Decrypter, ProtectedHeader } from './JWE'\nimport type { VerificationMethod, Resolvable } from 'did-resolver'\nimport { ECDH } from './ECDH'\nimport { fromString } from 'uint8arrays/from-string'\n\n/**\n * Extra parameters for JWE using authenticated encryption\n */\nexport type AuthEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.2}\n   * base64url encoded\n   */\n  apu?: string\n\n  /**\n   * See {@link https://datatracker.ietf.org/doc/html/rfc7518#section-4.6.1.3}\n   * base64url encoded\n   */\n  apv?: string\n}\n\n/**\n * Extra parameters for JWE using anonymous encryption\n */\nexport type AnonEncryptParams = {\n  /**\n   * recipient key ID\n   */\n  kid?: string\n}\n\n/**\n * Recommended encrypter for authenticated encryption (i.e. sender authentication and requires\n * sender private key to encrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientPublicKey the byte array representing the recipient public key\n * @param senderSecret either a Uint8Array representing the sender secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param options {@link AuthEncryptParams} used to specify extra header parameters\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthEncrypter(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  return xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(recipientPublicKey, senderSecret, options)\n}\n\n/**\n * Recommended encrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2}.\n *\n * @param publicKey the byte array representing the recipient public key\n * @param options {@link AnonEncryptParams} used to specify the recipient key ID (`kid`)\n *\n * @returns an {@link Encrypter} instance usable with {@link createJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonEncrypter(publicKey: Uint8Array, options: Partial<AnonEncryptParams> = {}): Encrypter {\n  return x25519Encrypter(publicKey, options?.kid)\n}\n\n/**\n * Recommended decrypter for authenticated encryption (i.e. sender authentication and requires\n * sender public key to decrypt the data).\n * Uses {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU v3 } and\n * {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n * @param senderPublicKey the byte array representing the sender public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-1PU and XC20PKW are proposed drafts in IETF and not a standard yet and\n * are subject to change as new revisions or until the official CFRG specification are released.\n *\n * @beta\n */\nexport function createAuthDecrypter(recipientSecret: Uint8Array | ECDH, senderPublicKey: Uint8Array): Decrypter {\n  return xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(recipientSecret, senderPublicKey)\n}\n\n/**\n * Recommended decrypter for anonymous encryption (i.e. no sender authentication).\n * Uses {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | ECDH-ES+XC20PKW v2 }.\n *\n * @param recipientSecret either a Uint8Array representing the recipient secret key or\n *   an ECDH function that wraps the key and can promise a shared secret given a public key\n *\n * @returns a {@link Decrypter} instance usable with {@link decryptJWE}\n *\n * NOTE: ECDH-ES+XC20PKW is a proposed draft in IETF and not a standard yet and\n * is subject to change as new revisions or until the official CFRG specification is released.\n *\n * @beta\n */\nexport function createAnonDecrypter(recipientSecret: Uint8Array | ECDH): Decrypter {\n  return x25519Decrypter(recipientSecret)\n}\n\nfunction xc20pEncrypter(key: Uint8Array): (cleartext: Uint8Array, aad?: Uint8Array) => EncryptionResult {\n  const cipher = new XChaCha20Poly1305(key)\n  return (cleartext: Uint8Array, aad?: Uint8Array) => {\n    const iv = randomBytes(cipher.nonceLength)\n    const sealed = cipher.seal(iv, cleartext, aad)\n    return {\n      ciphertext: sealed.subarray(0, sealed.length - cipher.tagLength),\n      tag: sealed.subarray(sealed.length - cipher.tagLength),\n      iv,\n    }\n  }\n}\n\nexport function xc20pDirEncrypter(key: Uint8Array): Encrypter {\n  const xc20pEncrypt = xc20pEncrypter(key)\n  const enc = 'XC20P'\n  const alg = 'dir'\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    const protHeader = encodeBase64url(JSON.stringify(Object.assign({ alg }, protectedHeader, { enc })))\n    const encodedAad = fromString(aad ? `${protHeader}.${bytesToBase64url(aad)}` : protHeader)\n    return {\n      ...xc20pEncrypt(cleartext, encodedAad),\n      protectedHeader: protHeader,\n    }\n  }\n  return { alg, enc, encrypt }\n}\n\nexport function xc20pDirDecrypter(key: Uint8Array): Decrypter {\n  const cipher = new XChaCha20Poly1305(key)\n  async function decrypt(sealed: Uint8Array, iv: Uint8Array, aad?: Uint8Array): Promise<Uint8Array | null> {\n    return cipher.open(iv, sealed, aad)\n  }\n  return { alg: 'dir', enc: 'XC20P', decrypt }\n}\n\nexport function x25519Encrypter(publicKey: Uint8Array, kid?: string): Encrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const sharedSecret = sharedKey(epk.secretKey, publicKey)\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (kid) recipient.header.kid = kid\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientPublicKey: Uint8Array,\n  senderSecret: Uint8Array | ECDH,\n  options: Partial<AuthEncryptParams> = {}\n): Encrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n\n  let partyUInfo: Uint8Array\n  let partyVInfo: Uint8Array\n  if (options.apu !== undefined) partyUInfo = base64ToBytes(options.apu)\n  if (options.apv !== undefined) partyVInfo = base64ToBytes(options.apv)\n\n  async function encryptCek(cek: Uint8Array): Promise<Recipient> {\n    const epk = generateKeyPair()\n    const zE = sharedKey(epk.secretKey, recipientPublicKey)\n\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    let zS\n    if (senderSecret instanceof Uint8Array) {\n      zS = sharedKey(senderSecret, recipientPublicKey)\n    } else {\n      zS = await senderSecret(recipientPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg, partyUInfo, partyVInfo)\n\n    const res = xc20pEncrypter(kek)(cek)\n    const recipient: Recipient = {\n      encrypted_key: bytesToBase64url(res.ciphertext),\n      header: {\n        alg,\n        iv: bytesToBase64url(res.iv),\n        tag: bytesToBase64url(res.tag),\n        epk: { kty: 'OKP', crv, x: bytesToBase64url(epk.publicKey) },\n      },\n    }\n    if (options.kid) recipient.header.kid = options.kid\n    if (options.apu) recipient.header.apu = options.apu\n    if (options.apv) recipient.header.apv = options.apv\n\n    return recipient\n  }\n  async function encrypt(\n    cleartext: Uint8Array,\n    protectedHeader: ProtectedHeader = {},\n    aad?: Uint8Array\n  ): Promise<EncryptionResult> {\n    // we won't want alg to be set to dir from xc20pDirEncrypter\n    Object.assign(protectedHeader, { alg: undefined })\n    // Content Encryption Key\n    const cek = randomBytes(32)\n    return {\n      ...(await xc20pDirEncrypter(cek).encrypt(cleartext, protectedHeader, aad)),\n      recipient: await encryptCek(cek),\n      cek,\n    }\n  }\n  return { alg, enc: 'XC20P', encrypt, encryptCek }\n}\n\nexport async function resolveX25519Encrypters(dids: string[], resolver: Resolvable): Promise<Encrypter[]> {\n  const encryptersForDID = async (did: string, resolved: string[] = []): Promise<Encrypter[]> => {\n    const { didResolutionMetadata, didDocument } = await resolver.resolve(did)\n    resolved.push(did)\n    if (didResolutionMetadata?.error || didDocument == null) {\n      throw new Error(\n        `resolver_error: Could not resolve ${did}: ${didResolutionMetadata.error}, ${didResolutionMetadata.message}`\n      )\n    }\n    let controllerEncrypters: Encrypter[] = []\n    if (!didDocument.controller && !didDocument.keyAgreement) {\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    }\n    if (didDocument.controller) {\n      let controllers = Array.isArray(didDocument.controller) ? didDocument.controller : [didDocument.controller]\n      controllers = controllers.filter((c) => !resolved.includes(c))\n      const encrypterPromises = controllers.map((did) =>\n        encryptersForDID(did, resolved).catch(() => {\n          return []\n        })\n      )\n      const encrypterArrays = await Promise.all(encrypterPromises)\n      controllerEncrypters = ([] as Encrypter[]).concat(...encrypterArrays)\n    }\n    const agreementKeys: VerificationMethod[] = didDocument.keyAgreement\n      ?.map((key) => {\n        if (typeof key === 'string') {\n          return [...(didDocument.publicKey || []), ...(didDocument.verificationMethod || [])].find(\n            (pk) => pk.id === key\n          )\n        }\n        return key\n      })\n      ?.filter((key) => typeof key !== 'undefined') as VerificationMethod[]\n    const pks =\n      agreementKeys?.filter((key) => {\n        // TODO: should be able to use non base58 keys too\n        return key.type === 'X25519KeyAgreementKey2019' && Boolean(key.publicKeyBase58)\n      }) || []\n    if (!pks.length && !controllerEncrypters.length)\n      throw new Error(`no_suitable_keys: Could not find x25519 key for ${did}`)\n    return pks\n      .map((pk) => x25519Encrypter(base58ToBytes(<string>pk.publicKeyBase58), pk.id))\n      .concat(...controllerEncrypters)\n  }\n\n  const encrypterPromises = dids.map((did) => encryptersForDID(did))\n  const encrypterArrays = await Promise.all(encrypterPromises)\n  const flattenedArray = ([] as Encrypter[]).concat(...encrypterArrays)\n  return flattenedArray\n}\n\nfunction validateHeader(header?: ProtectedHeader) {\n  if (!(header && header.epk && header.iv && header.tag)) {\n    throw new Error('bad_jwe: malformed header')\n  }\n}\n\nexport function x25519Decrypter(receiverSecret: Uint8Array | ECDH): Decrypter {\n  const alg = 'ECDH-ES+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    validateHeader(recipient?.header)\n    recipient = <Recipient>recipient\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let sharedSecret\n    if (receiverSecret instanceof Uint8Array) {\n      sharedSecret = sharedKey(receiverSecret, publicKey)\n    } else {\n      sharedSecret = await receiverSecret(publicKey)\n    }\n\n    // Key Encryption Key\n    const kek = concatKDF(sharedSecret, keyLen, alg)\n    // Content Encryption Key\n    const sealedCek = toSealed(<string>recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n\n/**\n * Implements ECDH-1PU+XC20PKW with XChaCha20Poly1305 based on the following specs:\n *   - {@link https://tools.ietf.org/html/draft-amringer-jose-chacha-02 | XC20PKW}\n *   - {@link https://tools.ietf.org/html/draft-madden-jose-ecdh-1pu-03 | ECDH-1PU}\n */\nexport function xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2(\n  recipientSecret: Uint8Array | ECDH,\n  senderPublicKey: Uint8Array\n): Decrypter {\n  const alg = 'ECDH-1PU+XC20PKW'\n  const keyLen = 256\n  const crv = 'X25519'\n  async function decrypt(\n    sealed: Uint8Array,\n    iv: Uint8Array,\n    aad?: Uint8Array,\n    recipient?: Recipient\n  ): Promise<Uint8Array | null> {\n    recipient = <Recipient>recipient\n    validateHeader(recipient.header)\n    if (recipient.header.epk?.crv !== crv || typeof recipient.header.epk.x == 'undefined') return null\n    // ECDH-1PU requires additional shared secret between\n    // static key of sender and static key of recipient\n    const publicKey = base64ToBytes(recipient.header.epk.x)\n    let zE: Uint8Array\n    let zS: Uint8Array\n\n    if (recipientSecret instanceof Uint8Array) {\n      zE = sharedKey(recipientSecret, publicKey)\n      zS = sharedKey(recipientSecret, senderPublicKey)\n    } else {\n      zE = await recipientSecret(publicKey)\n      zS = await recipientSecret(senderPublicKey)\n    }\n\n    const sharedSecret = new Uint8Array(zE.length + zS.length)\n    sharedSecret.set(zE)\n    sharedSecret.set(zS, zE.length)\n\n    // Key Encryption Key\n    let producerInfo\n    let consumerInfo\n    if (recipient.header.apu) producerInfo = base64ToBytes(recipient.header.apu)\n    if (recipient.header.apv) consumerInfo = base64ToBytes(recipient.header.apv)\n\n    const kek = concatKDF(sharedSecret, keyLen, alg, producerInfo, consumerInfo)\n    // Content Encryption Key\n    const sealedCek = toSealed(recipient.encrypted_key, recipient.header.tag)\n    const cek = await xc20pDirDecrypter(kek).decrypt(sealedCek, base64ToBytes(recipient.header.iv))\n    if (cek === null) return null\n\n    return xc20pDirDecrypter(cek).decrypt(sealed, iv, aad)\n  }\n  return { alg, enc: 'XC20P', decrypt }\n}\n"],"names":["bytesToBase64url","b","u8a","toString","base64ToBytes","s","inputBase64Url","replace","fromString","base58ToBytes","bytesToBase58","hexToBytes","input","startsWith","substring","toLowerCase","encodeBase64url","decodeBase64url","bytesToHex","stringToBytes","toJose","r","recoveryParam","recoverable","jose","Uint8Array","set","Error","fromJose","signature","signatureBytes","length","TypeError","slice","undefined","toSealed","ciphertext","tag","concat","leftpad","data","size","repeat","zl","zr","sl","sr","hl","hr","rotl","x","n","fn1","a","c","d","e","m","k","fn2","fn3","fn4","fn5","Ripemd160","constructor","blockSize","_a","_b","_c","_d","_e","_blockOffset","_block","_blockSize","_length","_finalized","update","block","offset","i","_update","j","carry","digest","_digest","fill","words","Array","temp","DataView","buffer","getInt32","al","bl","cl","dl","el","ar","br","cr","dr","er","tl","tr","t","setUint32","setInt32","sha256","payload","hash","keccak","sha3","keccak_256","arrayBuffer","toEthereumAddress","hexPublicKey","hashInput","ripemd160","writeUint32BE","value","array","encoded","lengthAndInput","concatKDF","secret","keyLen","alg","producerInfo","consumerInfo","roundNumber","secp256k1","elliptic","ec","ES256KSigner","privateKey","privateKeyBytes","keyPair","keyFromPrivate","sign","SimpleSigner","hexPrivateKey","signer","EllipticSigner","EdDSASigner","secretKey","dataBytes","sig","NaclSigner","base64PrivateKey","secp256r1","ES256Signer","instanceOfEcdsaSignature","object","ES256SignerAlg","ES256KSignerAlg","Ed25519SignerAlg","algorithms","ES256","ES256K","Ed25519","EdDSA","SignerAlg","impl","publicKeyToAddress","publicKey","otherAddress","version","publicKeyBuffer","publicKeyHash","step1","step2","step3","checksum","step4","EC","prefix","compressedPublicKey","keyFromPublic","getPublic","encode","bech32","toWords","verifyBlockchainAccountId","blockchainAccountId","chain","split","bip122","cosmos","join","toSignatureObject","rawSig","sigObj","extractPublicKeyBytes","pk","publicKeyBase58","publicKeyBase64","publicKeyHex","publicKeyJwk","crv","y","kty","publicKeyMultibase","base16","base58btc","base64","base64url","bases","baseDecoder","decoder","or","decode","verifyES256","authenticators","fullPublicKeys","filter","ethereumAddress","find","pubBytes","verify","err","verifyES256K","blockchainAddressKeys","verifyRecoverableES256K","signatures","so","checkSignatureAgainstSigner","recoveredKey","recoverPubKey","recoveredPublicKeyHex","recoveredCompressedPublicKeyHex","recoveredAddress","keyHex","map","key","verifyEd25519","clear","VerifierAlgorithm","JWT_ERROR","INVALID_JWT","INVALID_AUDIENCE","INVALID_SIGNATURE","NO_SUITABLE_KEYS","NOT_SUPPORTED","RESOLVER_ERROR","resolveAuthenticator","resolver","issuer","proofPurpose","types","SUPPORTED_PUBLIC_KEY_TYPES","didResult","resolve","accept","DID_JSON","result","Object","getOwnPropertyNames","indexOf","didDocument","didDocumentMetadata","didResolutionMetadata","contentType","error","message","getPublicKeyById","verificationMethods","pubid","filtered","id","publicKeysToCheck","verificationMethod","includes","assertionMethod","type","supported","didResolutionResult","verifyJWT","jwt","options","auth","audience","callbackUrl","skewTime","policies","header","decodeJWT","prototype","hasOwnProperty","call","did","iss","client_id","SELF_ISSUED_V2","SELF_ISSUED_V2_VC_INTEROP","sub","sub_jwk","kid","SELF_ISSUED_V0_1","scope","redirect_uri","verifyJWSDecoded","now","Math","floor","Date","NBF_SKEW","nowSkewed","nbf","iat","exp","aud","audArray","isArray","matchedAudience","item","verified","createJWT","expiresIn","canonicalize","typ","timestamps","fullPayload","createJWS","defaultAlg","encodedPayload","encodeSection","signingInput","jwtSigner","shouldCanonicalize","canonicalizeData","JSON","stringify","decodeJWS","jws","parts","match","parse","decodedJwt","assign","pubKeys","verifyJWS","jwsDecoded","bind","then","v","pact","onFulfilled","_this","thenable","validateJWE","jwe","protected","iv","recipients","rec","encrypted_key","encodeJWE","protectedHeader","recipient","aad","decryptJWE","decrypter","cleartext","protHeader","enc","sealed","decrypt","createJWE","encrypters","encrypt","encryptionResult","tmpEnc","reduce","acc","encrypter","cek","encryptCek","push","createX25519ECDH","mySecretKey","theirPublicKey","sharedKey","resolveX25519Encrypters","dids","encryptersForDID","resolved","agreementKeys","keyAgreement","pks","Boolean","controllerEncrypters","x25519Encrypter","controller","controllers","encrypterPromises","catch","Promise","all","encrypterArrays","flattenedArray","createAuthEncrypter","recipientPublicKey","senderSecret","xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonEncrypter","createAuthDecrypter","recipientSecret","senderPublicKey","xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2","createAnonDecrypter","x25519Decrypter","xc20pEncrypter","cipher","XChaCha20Poly1305","randomBytes","nonceLength","seal","subarray","tagLength","xc20pDirEncrypter","encodedAad","xc20pEncrypt","xc20pDirDecrypter","open","epk","generateKeyPair","sharedSecret","kek","res","zE","zS","partyUInfo","partyVInfo","apu","apv","validateHeader","receiverSecret","sealedCek"],"mappings":"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"}