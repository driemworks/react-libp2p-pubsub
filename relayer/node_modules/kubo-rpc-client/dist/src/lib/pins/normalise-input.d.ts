import { CID } from 'multiformats/cid';
export interface Pinnable {
    path?: string;
    cid?: CID;
    recursive?: boolean;
    metadata?: any;
}
export type ToPin = CID | string | Pinnable;
export type Source = ToPin | Iterable<ToPin> | AsyncIterable<ToPin>;
export interface Pin {
    path: string | CID;
    recursive: boolean;
    metadata?: any;
}
/**
 * Transform one of:
 *
 * ```ts
 * CID
 * String
 * { cid: CID recursive, metadata }
 * { path: String recursive, metadata }
 * Iterable<CID>
 * Iterable<String>
 * Iterable<{ cid: CID recursive, metadata }>
 * Iterable<{ path: String recursive, metadata }>
 * AsyncIterable<CID>
 * AsyncIterable<String>
 * AsyncIterable<{ cid: CID recursive, metadata }>
 * AsyncIterable<{ path: String recursive, metadata }>
 * ```
 * Into:
 *
 * ```ts
 * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>
 * ```
 */
export declare function normaliseInput(input: Source): AsyncGenerator<Pin>;
//# sourceMappingURL=normalise-input.d.ts.map