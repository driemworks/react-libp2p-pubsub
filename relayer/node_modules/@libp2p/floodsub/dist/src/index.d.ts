/**
 * @packageDocumentation
 *
 * > Don't use this module
 *
 * This module is a naive implementation of pubsub. It broadcasts all messages to all network peers, cannot provide older messages and has no protection against bad actors.
 *
 * It exists for academic purposes only, you should not use it in production.
 *
 * Instead please use [gossipsub](https://www.npmjs.com/package/@chainsafe/libp2p-gossipsub) - a more complete implementation which is also compatible with floodsub.
 *
 * @example Configuring libp2p to use floodsub
 *
 * ```TypeScript
 * import { createLibp2p } from 'libp2p'
 * import { floodsub } from '@libp2p/floodsub'
 *
 * const node = await createLibp2p({
 *   services: {
 *     pubsub: floodsub()
 *   }
 *   //... other options
 * })
 * await node.start()
 *
 * node.services.pubsub.subscribe('fruit')
 * node.services.pubsub.addEventListener('message', (evt) => {
 *   console.log(evt)
 * })
 *
 * node.services.pubsub.publish('fruit', new TextEncoder().encode('banana'))
 * ```
 */
import { serviceDependencies } from '@libp2p/interface';
import { PubSubBaseProtocol, type PubSubComponents } from '@libp2p/pubsub';
import { SimpleTimeCache } from './cache.js';
import { multicodec } from './config.js';
import type { PeerId, PubSubInit, Message, PubSubRPC, PubSubRPCMessage, PublishResult, PubSub } from '@libp2p/interface';
import type { Uint8ArrayList } from 'uint8arraylist';
export { multicodec };
export interface FloodSubInit extends PubSubInit {
    seenTTL?: number;
}
export interface FloodSubComponents extends PubSubComponents {
}
/**
 * FloodSub (aka dumbsub is an implementation of pubsub focused on
 * delivering an API for Publish/Subscribe, but with no CastTree Forming
 * (it just floods the network).
 */
export declare class FloodSub extends PubSubBaseProtocol {
    seenCache: SimpleTimeCache<boolean>;
    constructor(components: FloodSubComponents, init?: FloodSubInit);
    readonly [Symbol.toStringTag] = "@libp2p/floodsub";
    readonly [serviceDependencies]: string[];
    /**
     * Decode a Uint8Array into an RPC object
     */
    decodeRpc(bytes: Uint8Array | Uint8ArrayList): PubSubRPC;
    /**
     * Encode an RPC object into a Uint8Array
     */
    encodeRpc(rpc: PubSubRPC): Uint8Array;
    decodeMessage(bytes: Uint8Array | Uint8ArrayList): PubSubRPCMessage;
    encodeMessage(rpc: PubSubRPCMessage): Uint8Array;
    /**
     * Process incoming message
     * Extends base implementation to check router cache.
     */
    processMessage(from: PeerId, message: Message): Promise<void>;
    /**
     * Publish message created. Forward it to the peers.
     */
    publishMessage(from: PeerId, message: Message): Promise<PublishResult>;
}
export declare function floodsub(init?: FloodSubInit): (components: FloodSubComponents) => PubSub;
//# sourceMappingURL=index.d.ts.map